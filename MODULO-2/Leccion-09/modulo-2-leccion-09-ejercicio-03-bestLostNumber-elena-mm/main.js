'use strict';

// Partimos de
const lostNumbers = [4, 8, 15, 16, 23, 42];

// Crear funci칩n bestLostNumber que devuelve algunos n칰meros del array de los n칰meros de la serie Lost (lostNumbers)
function bestLostNumber() {
  // 1. crea array que contiene s칩lo los n칰meros pares que hay en lostNumbers.
  let evenNumbers = []; // Array vac칤a que contendr치 los n칰meros pares

  for (let i = 0; i < lostNumbers.length; i++) {
    // Si el n칰mero es par, meterlo en el evenNumbers con push();
    if (lostNumbers[i] % 2 === 0) {
      evenNumbers.push(lostNumbers[i]);
    }
  }

  // 2. crea array que contiene s칩lo los n칰meros pares que hay en lostNumbers.
  let threeNumbers = []; // Array vac칤a que contendr치 los n칰meros m칰ltiplos de 3

  for (let i = 0; i < lostNumbers.length; i++) {
    // misma l칩gica pero ahora el resto nos tiene que dar 0 al dividir por 3
    if (lostNumbers[i] % 3 === 0) {
      threeNumbers.push(lostNumbers[i]);
    }
  }

  // 3. Devolver una concatenaci칩n de los dos arays anteriores (primero pares, luego m칰ltiplos de tres);
  const result = evenNumbers.concat(threeNumbers);
  console.log(result);
}

// 游붉 EMM
